name: "Build and Push Docker Image"
on:
  workflow_call:
    inputs:
      docker_filepath:
        description: "The path dockerfile."
        required: true
        type: string
      repository_name:
        description: "The name of the docker repository."
        required: true
        type: string
      docker_context:
        description: "The context of the docker build"
        required: false
        type: string
        default: .
      architecture:
        description: "The architecture of the image to build. For amd64 choose 'linux/amd64', for both amd64 and arm64 choose 'linux/amd64,linux/arm64/v8'."
        required: false
        type: string
        default: linux/arm64/v8
    outputs:
      image_url:
        description: "Image URL"
        value: ${{ jobs.build-image.outputs.image_url }}
      image_tag:
        description: "Image tag"
        value: ${{ jobs.build-image.outputs.image_tag }}

permissions:
  id-token: write
  contents: read

env:
  AWS_REGISTRY: "156041400744.dkr.ecr.eu-west-1.amazonaws.com"
  AWS_REGION: "eu-west-1"

jobs:
  build-image:
    name: "👷‍️ Build and Push Docker Image"
    runs-on: ubuntu-latest
    outputs:
      image_url: ${{ steps.image_url.outputs.image_url }}
      image_tag: ${{ steps.image_url.outputs.image_tag }}
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::156041400744:role/github-ocid
        role-session-name: docker_build_push_role
        aws-region: ${{ env.AWS_REGION }}

    - name: "Docker Build Set Up"
      shell: bash
      run: |
        set -e        
        echo "Logging into Docker Repo"
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_REGISTRY }}
        
        echo "Create ECR Repository if it doesn't exist"
        if aws ecr create-repository --repository-name ${{ inputs.repository_name }} --region ${{ env.AWS_REGION }} ; then
          echo "Repository ${{ inputs.repository_name }} created"
        else
          echo "Repository ${{ inputs.repository_name }} already exists"
        fi
        
        echo "Setting Repository Lifecycle Policy"
        aws ecr put-lifecycle-policy \
        --repository-name ${{ inputs.repository_name }} \
        --region ${{ env.AWS_REGION }} \
        --lifecycle-policy-text '{"rules": [{"rulePriority": 1, "description": "Maximum number of images in registry", "selection": {"tagStatus": "any", "countType": "imageCountMoreThan", "countNumber": 10}, "action": {"type": "expire"}}]}'

    - name: Get current date & Generate random HEX
      run: |
        DOCKER_ARCH="arm64"
        DATE="$(date -u +'%Y%m%d-%H%M%S')"
        HEX="$(openssl rand -hex 4)"
        DOCKER_TAG="$DATE-$HEX-$DOCKER_ARCH"
        echo "DOCKER_TAG=$DOCKER_TAG" >> $GITHUB_ENV
        echo "DOCKER_ID=${{ inputs.repository_name }}:$DOCKER_TAG" >> $GITHUB_ENV

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image with version tag
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.docker_context }}
        file: ${{ inputs.docker_filepath }}
        push: true
        tags: ${{ env.AWS_REGISTRY }}/${{ env.DOCKER_ID }}
        platforms: ${{ inputs.architecture }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false

    - name: Build and push Docker image with latest tag
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.docker_context }}
        file: ${{ inputs.docker_filepath }}
        push: true
        tags: ${{ env.AWS_REGISTRY }}/${{ inputs.repository_name }}:latest
        platforms: ${{ inputs.architecture }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false

    - name: Print Docker Image URL
      id: image_url
      run: |
        echo image url: ${{ env.AWS_REGISTRY }}/${{ env.DOCKER_ID }}
        echo "image_url=${{ env.AWS_REGISTRY }}/${{ env.DOCKER_ID }}" >> $GITHUB_OUTPUT
        echo image tag: ${{ env.DOCKER_TAG }}
        echo "image_tag=${{ env.DOCKER_TAG }}" >> $GITHUB_OUTPUT